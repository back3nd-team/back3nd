name: Build, Version, and Publish Docker Image

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  # Job 1: Testar contexto e permissões
  test-context:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Debug Context
        run: |
          echo "Actor: ${{ github.actor }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Event: ${{ toJson(github.event) }}"
          echo "Environment Variables:"
          printenv

      - name: Verificar permissões do GITHUB_TOKEN
        run: |
          echo "Testando permissões do GITHUB_TOKEN..."
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository_owner }}/back3nd/permissions

  # Job 2: Preparar versão
  prepare-version:
    needs: test-context
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.increment.outputs.new_version }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get Current Version
        id: version
        run: |
          if [ ! -f VERSION ]; then
            echo "v0.1.0" > VERSION
          fi
          echo "Current version: $(cat VERSION)"

      - name: Increment Patch Version
        id: increment
        run: |
          VERSION=$(cat VERSION)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "::set-output name=new_version::$NEW_VERSION"

  # Job 3: Build e publicação da imagem
  build-and-publish:
    needs: prepare-version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Docker Login
        run: |
          docker info
          docker login ghcr.io -u "${{ github.actor }}" -p "${{ secrets.GITHUB_TOKEN }}"

      - name: Build and Tag Docker Image
        run: |
          NEW_VERSION=${{ needs.prepare-version.outputs.new_version }}
          docker build -f Docker/Dockerfile -t ghcr.io/${{ github.repository_owner }}/back3nd:$NEW_VERSION .
          docker tag ghcr.io/${{ github.repository_owner }}/back3nd:$NEW_VERSION ghcr.io/${{ github.repository_owner }}/back3nd:latest

      - name: Debug Docker Images
        run: |
          docker images

      - name: Push Docker Image
        run: |
          NEW_VERSION=${{ needs.prepare-version.outputs.new_version }}
          docker push ghcr.io/${{ github.repository_owner }}/back3nd:$NEW_VERSION
          docker push ghcr.io/${{ github.repository_owner }}/back3nd:latest

  # Job 4: Commit nova versão
  commit-version:
    needs: prepare-version
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Debug NEW_VERSION
        run: |
          echo "NEW_VERSION=${{ needs.prepare-version.outputs.new_version }}"

      - name: Commit New Version
        run: |
          echo "${{ needs.prepare-version.outputs.new_version }}" > VERSION
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "chore: bump version to ${{ needs.prepare-version.outputs.new_version }}"
          git push origin main
