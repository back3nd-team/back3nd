name: Build, Tag, and Publish Docker Image with Versioning

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      # Step 1: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Garantir que todas as tags e commits sejam buscados

      # Step 2: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN2025 }}

      # Step 3: Determine Next Version
      - name: Determine Next Version
        id: determine_version
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)

          # If no tags are found, start with 0.1.0
          if [ -z "$LATEST_TAG" ]; then
            NEXT_VERSION="0.1.0"
          else
            # Extract the major, minor, and patch numbers
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"

            # Increment the patch version
            PATCH=$((PATCH + 1))

            # Form the next version
            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "Next version: $NEXT_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      # Step 4: Check if Tag Already Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git tag -l "v${{ env.NEXT_VERSION }}")
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag v${{ env.NEXT_VERSION }} already exists."
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag v${{ env.NEXT_VERSION }} does not exist."
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # Step 5: Create Git Tag (if it doesn't exist)
      - name: Create Git Tag
        if: env.TAG_EXISTS == 'false'
        id: create_tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v${{ env.NEXT_VERSION }}" -m "Release version ${{ env.NEXT_VERSION }}"
          git push origin "v${{ env.NEXT_VERSION }}"

      # Step 6: Build Docker Image
      - name: Build Docker image
        run: |
          echo "Building Docker image with version: ${{ env.NEXT_VERSION }}"
          docker build -f Docker/Dockerfile -t ghcr.io/${{ github.repository_owner }}/back3nd:${{ env.NEXT_VERSION }} .

      # Step 7: Push Docker Image
      - name: Push Docker image
        run: |
          echo "Pushing Docker image with version: ${{ env.NEXT_VERSION }}"
          docker push ghcr.io/${{ github.repository_owner }}/back3nd:${{ env.NEXT_VERSION }}

      # Step 8: Check if Release Already Exists
      - name: Check if Release Exists
        id: check_release
        run: |
          RELEASE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository_owner }}/back3nd/releases/tags/v${{ env.NEXT_VERSION }})
          if [ "$RELEASE_RESPONSE" -eq 200 ]; then
            echo "Release for tag v${{ env.NEXT_VERSION }} already exists."
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Release for tag v${{ env.NEXT_VERSION }} does not exist."
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      # Step 9: Create GitHub Release (if it doesn't exist)
      - name: Create GitHub Release
        if: env.RELEASE_EXISTS == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEXT_VERSION }}
          release_name: 'Release v${{ env.NEXT_VERSION }}'
          body: |
            ## Changes
            - Docker image built and pushed with version: `v${{ env.NEXT_VERSION }}`
            - Container package URL: [ghcr.io/${{ github.repository_owner }}/back3nd:v${{ env.NEXT_VERSION }}](https://ghcr.io/${{ github.repository_owner }}/back3nd:v${{ env.NEXT_VERSION }})
          draft: false
          prerelease: false
