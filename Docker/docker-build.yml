name: Build, Tag, and Publish Docker Image with Versioning

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN2025 }}

      # Step 3: Get Current Version
      - name: Get Current Version
        id: get_version
        run: |
          VERSION_FILE="VERSION"
          if [ ! -f "$VERSION_FILE" ]; then
            echo "0.1.0" > $VERSION_FILE
          fi

          CURRENT_VERSION=$(cat $VERSION_FILE)

          # Verifica se a tag já existe no repositório remoto
          git fetch --tags
          TAG_EXISTS=$(git tag -l "${CURRENT_VERSION}")
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag ${CURRENT_VERSION} already exists. Using the same version."
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "$NEW_VERSION" > $VERSION_FILE
          fi

          echo "VERSION=$(cat $VERSION_FILE)" >> $GITHUB_ENV

      # Step 4: Build Docker Image
      - name: Build Docker image
        run: |
          echo "Building Docker image with version: ${{ env.VERSION }}"
          docker build -f Docker/Dockerfile -t ghcr.io/${{ github.repository_owner }}/back3nd:${{ env.VERSION }} .

      # Step 5: Push Docker Image
      - name: Push Docker image
        run: |
          echo "Pushing Docker image with version: ${{ env.VERSION }}"
          docker push ghcr.io/${{ github.repository_owner }}/back3nd:${{ env.VERSION }}

      # Step 6: Create Git Tag
      - name: Create Git Tag
        run: |
          git fetch --tags
          TAG_EXISTS=$(git tag -l "${{ env.VERSION }}")
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag ${{ env.VERSION }} already exists. Skipping tag creation."
          else
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git tag -a ${{ env.VERSION }} -m "Release for version ${{ env.VERSION }}"
            git push origin ${{ env.VERSION }}
          fi

      # Step 7: Create GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: 'Release ${{ env.VERSION }}'
          body: |
            ## Changes
            - Docker image built and pushed with version: `${{ env.VERSION }}`
          draft: false
          prerelease: false
