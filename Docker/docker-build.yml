name: Build, Tag, and Publish Docker Image with Versioning

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  push:
    branches:
      - main

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      # Step 1: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN2025 }}

      # Step 3: Determine Next Available Version
      - name: Determine Next Available Version
        id: determine_version
        run: |
          VERSION_FILE="VERSION"
          if [ ! -f "$VERSION_FILE" ]; then
            echo "0.5.0" > $VERSION_FILE
          fi

          CURRENT_VERSION=$(cat $VERSION_FILE)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Function to check if a tag exists
          tag_exists() {
            git fetch --tags
            git tag -l "$1" | grep -q "$1"
          }

          # Increment version until an available one is found
          while tag_exists "${MAJOR}.${MINOR}.${PATCH}"; do
            PATCH=$((PATCH + 1))
          done

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "$NEW_VERSION" > $VERSION_FILE
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Determined next available version: $NEW_VERSION"

      # Step 4: Build and Push Docker Image
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Docker/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/back3nd:${{ env.VERSION }}

      # Step 5: Create Git Tag
      - name: Create Git Tag
        uses: anothrNick/github-tag-action@1.57.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_prefix: ''
          release_branches: main
          custom_tag: ${{ env.VERSION }}
          message: 'Release for version ${{ env.VERSION }}'

      # Step 6: Create GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: 'Release ${{ env.VERSION }}'
          body: |
            ## Changes
            - Docker image built and pushed with version: `${{ env.VERSION }}`
          draft: false
          prerelease: true
