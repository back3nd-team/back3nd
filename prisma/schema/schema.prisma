generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch", "prismaSchemaFolder"]
}

generator zod {
  provider = "zod-prisma-types"
  output   = "./zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model back3nd_user {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String
  email                  String                   @unique
  password               String
  reset_token            String?
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  back3nd_password_reset back3nd_password_reset[]
  roles                  back3nd_user_role[]
}

model back3nd_role {
  id          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String               @unique
  description String?
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt
  permissions back3nd_permission[]
  users       back3nd_user_role[]
}

model back3nd_user_role {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String       @db.Uuid
  role_id    String       @db.Uuid
  created_at DateTime     @default(now())
  role       back3nd_role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user       back3nd_user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
}

model back3nd_permission {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id    String       @db.Uuid
  can_create Boolean      @default(false)
  can_read   Boolean      @default(false)
  can_update Boolean      @default(false)
  can_delete Boolean      @default(false)
  created_at DateTime     @default(now())
  collection String
  role       back3nd_role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, collection])
}

model back3nd_password_reset {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String       @db.Uuid
  token      String
  created_at DateTime     @default(now())
  expires_at DateTime
  user       back3nd_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
